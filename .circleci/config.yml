version: 2.1

orbs:
  docker: circleci/docker@2.2.0

executors:
  go:
    docker:
      - image: cimg/go:1.24
    environment:
      GOCACHE: "/tmp/go-cache"
    working_directory: ~/project

  docker-builder:
    machine:
      image: ubuntu-2204:2023.07.1
    resource_class: medium
    environment:
      DOCKER_BUILDKIT: 1

jobs:
  # Build and test Go application
  build-and-test:
    executor: go
    steps:
      - checkout
      
      # Restore Go module cache
      - restore_cache:
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}
            - go-mod-v2-
      
      # Restore Go build cache
      - restore_cache:
          keys:
            - go-build-v2-{{ .Branch }}-{{ .Revision }}
            - go-build-v2-{{ .Branch }}-
            - go-build-v2-
      
      - run:
          name: Download Go modules
          command: |
            go mod download
            go mod verify
      
      # Save Go module cache
      - save_cache:
          key: go-mod-v2-{{ checksum "go.sum" }}
          paths:
            - /go/pkg/mod
      
      - run:
          name: Run unit tests with coverage
          command: |
            mkdir -p /tmp/test-results
            go test -v -race -coverprofile=/tmp/test-results/coverage.out ./...
            go tool cover -html=/tmp/test-results/coverage.out -o /tmp/test-results/coverage.html
      
      # Save Go build cache
      - save_cache:
          key: go-build-v2-{{ .Branch }}-{{ .Revision }}
          paths:
            - /tmp/go-cache
      
      - store_test_results:
          path: /tmp/test-results
      
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results
  
  # Build and push nightly Docker image
  build-nightly:
    executor: docker-builder
    steps:
      - checkout
      
      - run:
          name: Set nightly version
          command: |
            NIGHTLY_VERSION="nightly-$(date +%Y%m%d)-${CIRCLE_SHA1:0:7}"
            echo "export NIGHTLY_VERSION=${NIGHTLY_VERSION}" >> $BASH_ENV
            echo "Building nightly version: ${NIGHTLY_VERSION}"
      
      - run:
          name: Set up Docker Buildx
          command: |
            docker buildx create --use --name multi-arch-builder
            docker buildx inspect --bootstrap
      
      - run:
          name: Docker login
          command: |
            echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
      
      - run:
          name: Build and push nightly multi-arch image
          command: |
            docker buildx build \
              --platform linux/amd64,linux/arm64 \
              --build-arg VERSION="${NIGHTLY_VERSION}" \
              --build-arg COMMIT="${CIRCLE_SHA1}" \
              --build-arg DATE="$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
              -t crovlune/plaxt:nightly \
              -t crovlune/plaxt:"${NIGHTLY_VERSION}" \
              --push \
              .
  
  # Build and push release Docker image (manual approval)
  build-release:
    executor: docker-builder
    parameters:
      version:
        type: string
        default: "1.2.15"
    steps:
      - checkout
      
      - run:
          name: Validate version format
          command: |
            if ! echo "<< parameters.version >>" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
              echo "Error: Version must be in semver format (e.g., 1.2.15)"
              exit 1
            fi
      
      - run:
          name: Set version
          command: |
            echo "export RELEASE_VERSION=<< parameters.version >>" >> $BASH_ENV
            echo "Building release version: << parameters.version >>"
      
      - run:
          name: Set up Docker Buildx
          command: |
            docker buildx create --use --name multi-arch-builder
            docker buildx inspect --bootstrap
      
      - run:
          name: Docker login
          command: |
            echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
      
      - run:
          name: Build and push release multi-arch image
          command: |
            docker buildx build \
              --platform linux/amd64,linux/arm64 \
              --build-arg VERSION="<< parameters.version >>" \
              --build-arg COMMIT="${CIRCLE_SHA1}" \
              --build-arg DATE="$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
              -t crovlune/plaxt:latest \
              -t crovlune/plaxt:"<< parameters.version >>" \
              -t crovlune/plaxt:"$(echo << parameters.version >> | cut -d. -f1,2)" \
              --push \
              .
      
      - run:
          name: Create version file
          command: |
            echo "<< parameters.version >>" > VERSION.txt
      
      - store_artifacts:
          path: VERSION.txt
          destination: version

workflows:
  version: 2
  
  # Run on every commit
  build-test:
    jobs:
      - build-and-test
  
  # Nightly builds (runs daily at 2 AM UTC)
  nightly:
    triggers:
      - schedule:
          cron: "0 2 * * *"
          filters:
            branches:
              only:
                - main
                - master
    jobs:
      - build-and-test
      - build-nightly:
          requires:
            - build-and-test
          context:
            - docker-hub
  
  # Manual release workflow
  release:
    jobs:
      - build-and-test:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      
      - hold-for-approval:
          type: approval
          requires:
            - build-and-test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      
      - build-release:
          version: "${CIRCLE_TAG#v}"
          requires:
            - hold-for-approval
          context:
            - docker-hub
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
